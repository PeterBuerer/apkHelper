#!/bin/bash

function cmd_help
{
    if [ "$1" = "" ]; then
        help_help
    elif [ "$1" = "-v" ]; then
        #all help functions
        echo
    else
        while [ "$1" != "" ]; do
            #case "$1" in 
            #[cC]ommand ) help_function;;
            #* ) problem_encountered "Not a valid command";;
            #esac
            shift
        done
    fi
}

function help_help
{
    echo "This is of no help right now"
}

#called to end script in error
function problem_encountered
{
    if [ "$1" != "" ]; then
        echo "$1" >&2
    fi
    #clean_up
    echo 'type "help" for usage page' >&2
    exit 1
}

# function clean_up
# {
# }

#called to end the script with success
function script_done
{
    #clean_up
    exit 0
}

function force_from_args
{
    while [ "$1" != "" ]; do
        case "$1" in
            -F | --force ) echo "--force"
                           break;;
            * )            shift
        esac
    done
}

function apk_from_args
{
    while [ "$1" != "" ]; do
        local arg="${1##*.}"
        case "$arg" in
            "apk" ) echo "$1"
                           break;;
            * )            shift
        esac
    done
}

function first_apk_in_dir
{
    echo "$(ls | grep "\.apk" | head -1)"
}

#returns versionName output by aapt
function cmd_summary
{
    local firstApk="$(first_apk_in_dir)"
    local apk=""

    if [ "$1" != "" ]; then
        apk="$1"
    elif [ "$firstApk" != "" ]; then
        apk="$firstApk"
    fi

    if [ "${apk##*.}" = apk ]; then
        echo
        echo "**********************************"
        echo
        echo "  Package Name: "$(aapt dump badging "$apk" | sed -n "s/.*package: name='\(.*\)' versionC.*/\1/1p")""
        echo "  Version Name: "$(aapt dump badging "$apk" | sed -n "s/.*versionName='\(.*\)'/\1/p")""
        echo "  Version Code: "$(aapt dump badging "$apk" | sed -n "s/.*versionCode='\(.*\)' versionN.*/\1/p")""
        echo
        echo "**********************************"
        echo
    else
        problem_encountered "no apk given"
    fi
}

function cmd_verify
{
   #options: 
	# -certs
	# -verbose 
   if [ "$1" = "--certs" -o "$1" = "-c" ]; then
	 opts="$opts -certs"
	 shift
   fi
    #Question: Should this cmd accept -verbose and -v?
   opts="-verify"
   # if [ "$1" = "--verbose" -o "$1" = "-v" ]; then     
   #     opts="$opts -verbose"
   #     shift
   # fi


	
   #check to see if a valid file is passed to the method (just .jar and .apk????)

   filetype="${1##*.}"
   if [ "$filetype" = "apk" ]; then
       jarsigner "$opts" -verbose "$1"                    ####uncomment when go time
       #echo "jarsigner "$opts" "$1""
   else 
      problem_encountered  "file not an apk"
   fi 
 
   #Verify an APK:
   #$ jarsigner -verify –verbose [-certs] theapp.apk
}
 
function cmd_sign
{
    local keypass=""
    local storepass=""
    local keystore=""
    local unsigned=""
    local alias=""
    local force="$(force_from_args "$@")"
    

# check if option "allindir" then grab passes plus keystore path and fire that function

    #DOC: do not need to explicitly use -keystore as long as you provide the path to a .keystore
    if [ "$1" = "--keystore" -a "${2##*.}" = "keystore" ]; then
       keystore="$2"
       shift 2 
   elif [ "${1##*.}" = "keystore" ]; then
       keystore="$1"
       shift
   else
       problem_encountered "missing keystore"
   fi 
   
   #DOC: do not need to explicitly use -keypass and -storepass; if you don't, you will be prompted for them 
    if [ "$1" = "--keypass" ]; then
        keypass="$2"
        shift 2
    fi
         
    if [ "$1" = "--storepass" -o "$1" = "-s" ]; then
        storepass="$2"
        shift 2
    fi

    local filetype="${1##*.}"
    if [ "$filetype" = "apk" ]; then
        unsigned="$1"
        shift
    else
        problem_encountered "missing apk"
    fi

    if [ "$1" != "" ]; then
        alias="$1"
    else
        problem_encountered "missing alias"
    fi

    if [ "$keypass" = "" ]; then
        echo "Enter Keypass:" 
        stty_orig=`stty -g` # save original terminal setting.
        stty -echo          # turn-off echoing.
        read keypass        # read the password
        stty $stty_orig     # restore terminal setting.
    fi
   
     if [ "$storepass" = "" ]; then
        echo "Enter Storepass:" 
        stty_orig=`stty -g` # save original terminal setting.
        stty -echo          # turn-off echoing.
        read storepass      # read the password
        stty $stty_orig     # restore terminal setting.
     fi

 #####make sure that the given new name for the signed archive is corrct 

    "$(jarsigner -keystore "$keystore" -keypass "$keypass" -storepass "$storepass" -signedjar "${unsigned%%.*}-signed.apk" "$unsigned" "$alias")"
    #Question: How do you want these commands to be structured so that this script is more useful than just typing in the individual commands. Should the script just take a ton of args up front and the verify -> sign (if not signed) -> zipalign while still having the option to do each command individually?
   
   local errorStatus=$?
   if [ $errorStatus = 0 ];then
      echo "$unsigned signed to output file: "${unsigned%%.*}-signed""
   elif [ "$force" = "--force" ]; then
       echo "signing of $unsigned failed"
   else
       problem_encountered "signing of $unsigned failed"
   fi
       
  #SIGN AN APK:
  #$ jarsigner -verbose –keystore ~/Publishing/Resources/something.keystore unsigned.apk "alias"
  
  #check to make sure that the earl given leads to a .keystore ???
  
  #check to make sure that they give you an apk (or jar???)
  #if no alias is provided, kick 'em
  #Question: What should happen if a -keystore url is not specified?
  

#setup and parse args
# Keystore Pass (...)
# PrivateKey Pass (...)

  echo "sign"
}
 
function cmd_zipalign
{
  # make sure that the apk is signed? If you sign after zipalign, it messes up the alignment
    local force="$(force_from_args "$@")"

    local aligned=""

    local unaligned="" 
    if [ "${1##*.}" = "apk" ]; then
      #verify
      #if passed
        #aligned="$1"
      unaligned="$1"
      shift
    else
        problem_encountered "missing apk"
    fi
####DOC: will append .apk if there isn't one for the specified output file 
#Question: will zipalign just give the given name the same extension as the unaligned file?

    if [ "$1" != "" ]; then
        if [ "${1##*.}" != apk ]; then
            aligned="$1.apk"
        else
            aligned="$1"
        fi
    else
      aligned="${unaligned%%.*}-zipaligned.apk"
    fi 

  # ZIPALIGN THE SIGNED APK
   zipalign 4 "$unaligned" "$aligned"
   errorStatus=$? 
  #Question: Should we force the outfile to have a .apk extension?

  if [ $errorStatus = 0 ]; then
      echo "aligned to output file: $aligned"
  elif [ "$force" = "--force" ]; then
      echo "zipalign of "$unaligned" failed"
  else
      problem_encountered "zipalign failed"
  fi
}

function cmd_all_in_dir
{
    #first check to see if any .apk files are in the current directory

    local force="$(force_from_args "$@")"
                             
    ls | grep .apk 2>&1 >/dev/null
    errorStatus=$?

    if [ $errorStatus != 0 ]; then
        problem_encountered "an error occured or there are no apk's in working directory"
    fi

    local keystore=""
    if [ "$1" = "--keystore" -a "${2##*.}" = "keystore" ]; then
        keystore="$2"
        shift 2 
    elif [ "${1##*.}" = "keystore" ]; then
        keystore="$1"
        shift
    else
        problem_encountered "missing keystore"
    fi 
    
    local keypass="" 
    if [ "$keypass" = "" ]; then
        echo "Enter Keypass:" 
        stty_orig=`stty -g` # save original terminal setting.
        stty -echo          # turn-off echoing.
        read keypass        # read the password
        stty $stty_orig     # restore terminal setting.
    fi

    local storepass=""
    if [ "$storepass" = "" ]; then
       echo "Enter Storepass:" 
       stty_orig=`stty -g` # save original terminal setting.
       stty -echo          # turn-off echoing.
       read storepass      # read the password
       stty $stty_orig     # restore terminal setting.
    fi

    local alias=""
    if [ "$1" != "" ]; then
        alias="$1"
    else
        problem_encountered "missing alias"
    fi


    #Question: Is it worth it to allow for a directory other than the current directory to be specified for this?
    #sign and zipalign all apks in the given directory with the given keystore
    ls | grep .apk | while read apk ; do
        echo "Processing $apk"
        cmd_sign --keystore "$keystore" --keypass "$keypass" --storepass "$storepass" "$apk" "$alias" "$force"
        cmd_zipalign "${apk%%.*}-signed.apk" "$force"
        done
    echo "all in dir"
}


function test
{
    # local keypass=""
    # local storepass=""

    # echo "Enter Keypass:" 
    # stty_orig=`stty -g` # save original terminal setting.
    # stty -echo          # turn-off echoing.
    # read keypass        # read the password
    # stty $stty_orig     # restore terminal setting.
    # 
    # echo "Enter Storepass:" 
    # stty_orig=`stty -g` # save original terminal setting.
    # stty -echo          # turn-off echoing.
    # read storepass      # read the password
    # stty $stty_orig     # restore terminal setting.

    #cmd_zipalign "test.apk" "test-output.apk" -F
    #cmd_sign -keystore "$1" "test.apk" "$2"
    #cmd_all_in_dir "$1" "$2"

    # echo "$pass" | sed 's/\(!\)/\1/g'
    # echo "$pass"
    # echo "$pass\n" | sudo -S echo "pasword"
    # echo $pass
    echo "test"
}

#Install
# put binary dependencies in /usr/bin

###MAIN###

cmd="$1"
bd="$(pwd)"

#if there was no command, exit
if [ "$cmd" = "" ]; then
    problem_encountered "no command"
else
    shift
fi

#if cmd was "help" or "h" show the usage page
if [ "$cmd" = "help" -o "$cmd" = "h" ]; then 
    cmd_help "$@"
    script_done
fi

#Commands

if [ "$cmd" = "test" -o "$cmd" = "t" ]; then
    test "$@"
    script_done
fi

if [ "$cmd" = "verify" -o "$cmd" = "v" ]; then
    cmd_verify "$@"
    script_done
elif [ "$cmd" = "sign" -o "$cmd" = "s" ]; then
   cmd_sign "$@" 
   script_done
elif [ "$cmd" = "zipalign" -o "$cmd" = "z" ]; then
    cmd_zipalign "$@"
    script_done
elif [ "$cmd" = "all" -o "$cmd" = "a" ]; then
    cmd_all_in_dir "$@"
    script_done
elif [ "$cmd" = "summary" ]; then
    cmd_summary "$@"
    script_done
else
    problem_encountered "invalid command"
fi

#verify -verbose? the.apk

#sign the.apk

#zipalign or just align or something 





